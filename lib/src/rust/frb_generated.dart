// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/color_extractor.dart';
import 'api/music_handler.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1686699472;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_adiman',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiMusicHandlerAddSeparator({required String separator});

  Future<void> crateApiMusicHandlerCancelDownload();

  Future<bool> crateApiMusicHandlerClearMp3Cache();

  Future<String> crateApiMusicHandlerDownloadToTemp({required String query});

  Future<Float64List> crateApiMusicHandlerExtractWaveformFromMp3(
      {required String mp3Path, int? sampleCount, int? channels});

  Future<List<String>> crateApiMusicHandlerGetArtistViaFfprobe(
      {required String filePath});

  Future<Uint8List?> crateApiMusicHandlerGetCachedAlbumArt(
      {required String path});

  Future<List<String>> crateApiMusicHandlerGetCurrentSeparators();

  Future<String?> crateApiMusicHandlerGetCurrentSongPath();

  Future<double> crateApiMusicHandlerGetCvol();

  Future<int?> crateApiColorExtractorGetDominantColor(
      {required List<int> data});

  Future<double> crateApiMusicHandlerGetPlaybackPosition();

  Future<Float32List> crateApiMusicHandlerGetRealtimePeaks();

  Future<bool> crateApiMusicHandlerInitializePlayer();

  Future<bool> crateApiMusicHandlerIsPlaying();

  Future<bool> crateApiMusicHandlerPauseSong();

  Future<bool> crateApiMusicHandlerPlaySong({required String path});

  Future<PlayerState> crateApiMusicHandlerPlayerStateDefault();

  Future<void> crateApiMusicHandlerRemoveSeparator({required String separator});

  Future<void> crateApiMusicHandlerResetSeparators();

  Future<bool> crateApiMusicHandlerResumeSong();

  Future<List<SongMetadata>> crateApiMusicHandlerScanMusicDirectory(
      {required String dirPath, required bool autoConvert});

  Future<List<SongMetadata>> crateApiMusicHandlerSearchLyrics(
      {required String lyricsDir,
      required String query,
      required String songDir});

  Future<bool> crateApiMusicHandlerSeekToPosition({required double position});

  Future<void> crateApiMusicHandlerSetFadein({required bool value});

  Future<void> crateApiMusicHandlerSetSeparators(
      {required List<String> separators});

  Future<bool> crateApiMusicHandlerSetVolume({required double volume});

  Future<bool> crateApiMusicHandlerSkipToNext(
      {required List<String> songs, required BigInt currentIndex});

  Future<bool> crateApiMusicHandlerSkipToPrevious(
      {required List<String> songs, required BigInt currentIndex});

  Future<bool> crateApiMusicHandlerStopSong();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiMusicHandlerAddSeparator({required String separator}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(separator, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMusicHandlerAddSeparatorConstMeta,
      argValues: [separator],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerAddSeparatorConstMeta =>
      const TaskConstMeta(
        debugName: "add_separator",
        argNames: ["separator"],
      );

  @override
  Future<void> crateApiMusicHandlerCancelDownload() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerCancelDownloadConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerCancelDownloadConstMeta =>
      const TaskConstMeta(
        debugName: "cancel_download",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerClearMp3Cache() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerClearMp3CacheConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerClearMp3CacheConstMeta =>
      const TaskConstMeta(
        debugName: "clear_mp3_cache",
        argNames: [],
      );

  @override
  Future<String> crateApiMusicHandlerDownloadToTemp({required String query}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMusicHandlerDownloadToTempConstMeta,
      argValues: [query],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerDownloadToTempConstMeta =>
      const TaskConstMeta(
        debugName: "download_to_temp",
        argNames: ["query"],
      );

  @override
  Future<Float64List> crateApiMusicHandlerExtractWaveformFromMp3(
      {required String mp3Path, int? sampleCount, int? channels}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(mp3Path, serializer);
        sse_encode_opt_box_autoadd_u_32(sampleCount, serializer);
        sse_encode_opt_box_autoadd_u_32(channels, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMusicHandlerExtractWaveformFromMp3ConstMeta,
      argValues: [mp3Path, sampleCount, channels],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerExtractWaveformFromMp3ConstMeta =>
      const TaskConstMeta(
        debugName: "extract_waveform_from_mp3",
        argNames: ["mp3Path", "sampleCount", "channels"],
      );

  @override
  Future<List<String>> crateApiMusicHandlerGetArtistViaFfprobe(
      {required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMusicHandlerGetArtistViaFfprobeConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetArtistViaFfprobeConstMeta =>
      const TaskConstMeta(
        debugName: "get_artist_via_ffprobe",
        argNames: ["filePath"],
      );

  @override
  Future<Uint8List?> crateApiMusicHandlerGetCachedAlbumArt(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetCachedAlbumArtConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetCachedAlbumArtConstMeta =>
      const TaskConstMeta(
        debugName: "get_cached_album_art",
        argNames: ["path"],
      );

  @override
  Future<List<String>> crateApiMusicHandlerGetCurrentSeparators() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetCurrentSeparatorsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetCurrentSeparatorsConstMeta =>
      const TaskConstMeta(
        debugName: "get_current_separators",
        argNames: [],
      );

  @override
  Future<String?> crateApiMusicHandlerGetCurrentSongPath() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetCurrentSongPathConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetCurrentSongPathConstMeta =>
      const TaskConstMeta(
        debugName: "get_current_song_path",
        argNames: [],
      );

  @override
  Future<double> crateApiMusicHandlerGetCvol() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetCvolConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetCvolConstMeta =>
      const TaskConstMeta(
        debugName: "get_cvol",
        argNames: [],
      );

  @override
  Future<int?> crateApiColorExtractorGetDominantColor(
      {required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiColorExtractorGetDominantColorConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiColorExtractorGetDominantColorConstMeta =>
      const TaskConstMeta(
        debugName: "get_dominant_color",
        argNames: ["data"],
      );

  @override
  Future<double> crateApiMusicHandlerGetPlaybackPosition() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetPlaybackPositionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetPlaybackPositionConstMeta =>
      const TaskConstMeta(
        debugName: "get_playback_position",
        argNames: [],
      );

  @override
  Future<Float32List> crateApiMusicHandlerGetRealtimePeaks() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerGetRealtimePeaksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerGetRealtimePeaksConstMeta =>
      const TaskConstMeta(
        debugName: "get_realtime_peaks",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerInitializePlayer() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerInitializePlayerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerInitializePlayerConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_player",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerIsPlaying() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerIsPlayingConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerIsPlayingConstMeta =>
      const TaskConstMeta(
        debugName: "is_playing",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerPauseSong() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerPauseSongConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerPauseSongConstMeta =>
      const TaskConstMeta(
        debugName: "pause_song",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerPlaySong({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerPlaySongConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerPlaySongConstMeta =>
      const TaskConstMeta(
        debugName: "play_song",
        argNames: ["path"],
      );

  @override
  Future<PlayerState> crateApiMusicHandlerPlayerStateDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_player_state,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerPlayerStateDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerPlayerStateDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "player_state_default",
        argNames: [],
      );

  @override
  Future<void> crateApiMusicHandlerRemoveSeparator(
      {required String separator}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(separator, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMusicHandlerRemoveSeparatorConstMeta,
      argValues: [separator],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerRemoveSeparatorConstMeta =>
      const TaskConstMeta(
        debugName: "remove_separator",
        argNames: ["separator"],
      );

  @override
  Future<void> crateApiMusicHandlerResetSeparators() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerResetSeparatorsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerResetSeparatorsConstMeta =>
      const TaskConstMeta(
        debugName: "reset_separators",
        argNames: [],
      );

  @override
  Future<bool> crateApiMusicHandlerResumeSong() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerResumeSongConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerResumeSongConstMeta =>
      const TaskConstMeta(
        debugName: "resume_song",
        argNames: [],
      );

  @override
  Future<List<SongMetadata>> crateApiMusicHandlerScanMusicDirectory(
      {required String dirPath, required bool autoConvert}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dirPath, serializer);
        sse_encode_bool(autoConvert, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_song_metadata,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerScanMusicDirectoryConstMeta,
      argValues: [dirPath, autoConvert],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerScanMusicDirectoryConstMeta =>
      const TaskConstMeta(
        debugName: "scan_music_directory",
        argNames: ["dirPath", "autoConvert"],
      );

  @override
  Future<List<SongMetadata>> crateApiMusicHandlerSearchLyrics(
      {required String lyricsDir,
      required String query,
      required String songDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(lyricsDir, serializer);
        sse_encode_String(query, serializer);
        sse_encode_String(songDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_song_metadata,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMusicHandlerSearchLyricsConstMeta,
      argValues: [lyricsDir, query, songDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSearchLyricsConstMeta =>
      const TaskConstMeta(
        debugName: "search_lyrics",
        argNames: ["lyricsDir", "query", "songDir"],
      );

  @override
  Future<bool> crateApiMusicHandlerSeekToPosition({required double position}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(position, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSeekToPositionConstMeta,
      argValues: [position],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSeekToPositionConstMeta =>
      const TaskConstMeta(
        debugName: "seek_to_position",
        argNames: ["position"],
      );

  @override
  Future<void> crateApiMusicHandlerSetFadein({required bool value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSetFadeinConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSetFadeinConstMeta =>
      const TaskConstMeta(
        debugName: "set_fadein",
        argNames: ["value"],
      );

  @override
  Future<void> crateApiMusicHandlerSetSeparators(
      {required List<String> separators}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(separators, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSetSeparatorsConstMeta,
      argValues: [separators],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSetSeparatorsConstMeta =>
      const TaskConstMeta(
        debugName: "set_separators",
        argNames: ["separators"],
      );

  @override
  Future<bool> crateApiMusicHandlerSetVolume({required double volume}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(volume, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSetVolumeConstMeta,
      argValues: [volume],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSetVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "set_volume",
        argNames: ["volume"],
      );

  @override
  Future<bool> crateApiMusicHandlerSkipToNext(
      {required List<String> songs, required BigInt currentIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(songs, serializer);
        sse_encode_usize(currentIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSkipToNextConstMeta,
      argValues: [songs, currentIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSkipToNextConstMeta =>
      const TaskConstMeta(
        debugName: "skip_to_next",
        argNames: ["songs", "currentIndex"],
      );

  @override
  Future<bool> crateApiMusicHandlerSkipToPrevious(
      {required List<String> songs, required BigInt currentIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(songs, serializer);
        sse_encode_usize(currentIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerSkipToPreviousConstMeta,
      argValues: [songs, currentIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerSkipToPreviousConstMeta =>
      const TaskConstMeta(
        debugName: "skip_to_previous",
        argNames: ["songs", "currentIndex"],
      );

  @override
  Future<bool> crateApiMusicHandlerStopSong() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMusicHandlerStopSongConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMusicHandlerStopSongConstMeta =>
      const TaskConstMeta(
        debugName: "stop_song",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float64List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SongMetadata> dco_decode_list_song_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_song_metadata).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PlayerState dco_decode_player_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PlayerState(
      initialized: dco_decode_bool(arr[0]),
    );
  }

  @protected
  SongMetadata dco_decode_song_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SongMetadata(
      title: dco_decode_String(arr[0]),
      artist: dco_decode_String(arr[1]),
      album: dco_decode_String(arr[2]),
      duration: dco_decode_u_64(arr[3]),
      path: dco_decode_String(arr[4]),
      albumArt: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      genre: dco_decode_String(arr[6]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SongMetadata> sse_decode_list_song_metadata(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SongMetadata>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_song_metadata(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlayerState sse_decode_player_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_initialized = sse_decode_bool(deserializer);
    return PlayerState(initialized: var_initialized);
  }

  @protected
  SongMetadata sse_decode_song_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_artist = sse_decode_String(deserializer);
    var var_album = sse_decode_String(deserializer);
    var var_duration = sse_decode_u_64(deserializer);
    var var_path = sse_decode_String(deserializer);
    var var_albumArt = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_genre = sse_decode_String(deserializer);
    return SongMetadata(
        title: var_title,
        artist: var_artist,
        album: var_album,
        duration: var_duration,
        path: var_path,
        albumArt: var_albumArt,
        genre: var_genre);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_song_metadata(
      List<SongMetadata> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_song_metadata(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_player_state(PlayerState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.initialized, serializer);
  }

  @protected
  void sse_encode_song_metadata(SongMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.artist, serializer);
    sse_encode_String(self.album, serializer);
    sse_encode_u_64(self.duration, serializer);
    sse_encode_String(self.path, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.albumArt, serializer);
    sse_encode_String(self.genre, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
